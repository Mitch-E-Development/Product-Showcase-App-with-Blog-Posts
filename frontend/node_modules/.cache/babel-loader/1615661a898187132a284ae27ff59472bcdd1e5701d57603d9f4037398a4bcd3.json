{"ast":null,"code":"var _jsxFileName = \"/home/dryphter-dev/Projects/Web/MERN/product-showcase/frontend/src/pages/Posts.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getPosts } from \"../services/postService\";\nimport Banner from \"../components/posts/Banner\";\nimport Filters from \"../components/posts/Filters\";\nimport PostsCards from \"../components/posts/PostsCards\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  const [filter, setFilter] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const postData = await getPosts();\n        setPosts(postData);\n        setFilteredPosts(postData); // Initialize filtered posts with all posts\n      } catch (error) {\n        console.log(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    // Apply filter and search query\n    let filtered = posts;\n    if (filter) {\n      switch (filter) {\n        case \"NEWEST\":\n          filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n          break;\n        case \"OLDEST\":\n          filtered.sort((a, b) => new Date(b.createdAt) + new Date(a.createdAt));\n          break;\n        case \"A-Z\":\n          filtered.sort((a, b) => a.title.localeCompare(b.title));\n          break;\n        case \"NEWS\":\n          filtered = filtered.filter(post => post.category === \"News\");\n          break;\n        case \"GUIDES\":\n          filtered = filtered.filter(post => post.category === \"Guides\");\n          break;\n        default:\n          break;\n      }\n    }\n    if (searchQuery) {\n      filtered = filtered.filter(post => post.title.toLowerCase().includes(searchQuery.toLowerCase()) || post.category.toLowerCase().includes(searchQuery.toLowerCase()) || post.content.toLowerCase().includes(searchQuery.toLowerCase()));\n    }\n\n    // Check if the clear button was clicked\n    if (!filter && !searchQuery) {\n      filtered = [...posts]; // Show all posts\n    }\n    setFilteredPosts(filtered);\n  }, [filter, searchQuery, posts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filters, {\n      filter: filter,\n      setFilter: setFilter,\n      setSearchQuery: setSearchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostsCards, {\n      posts: filteredPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"HflHKW9DgVDcSB7HnH0A/lX9dzA=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useState","useEffect","getPosts","Banner","Filters","PostsCards","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","filteredPosts","setFilteredPosts","filter","setFilter","searchQuery","setSearchQuery","fetchData","postData","error","console","log","filtered","sort","a","b","Date","createdAt","title","localeCompare","post","category","toLowerCase","includes","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/dryphter-dev/Projects/Web/MERN/product-showcase/frontend/src/pages/Posts.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getPosts } from \"../services/postService\";\nimport Banner from \"../components/posts/Banner\";\nimport Filters from \"../components/posts/Filters\";\nimport PostsCards from \"../components/posts/PostsCards\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [filteredPosts, setFilteredPosts] = useState([]);\n  const [filter, setFilter] = useState(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const postData = await getPosts();\n        setPosts(postData);\n        setFilteredPosts(postData); // Initialize filtered posts with all posts\n      } catch (error) {\n        console.log(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    // Apply filter and search query\n    let filtered = posts;\n\n    if (filter) {\n      switch (filter) {\n        case \"NEWEST\":\n          filtered.sort(\n            (a, b) => new Date(b.createdAt) - new Date(a.createdAt)\n          );\n          break;\n        case \"OLDEST\":\n          filtered.sort(\n            (a, b) => new Date(b.createdAt) + new Date(a.createdAt)\n          );\n          break;\n        case \"A-Z\":\n          filtered.sort((a, b) => a.title.localeCompare(b.title));\n          break;\n        case \"NEWS\":\n          filtered = filtered.filter((post) => post.category === \"News\");\n          break;\n        case \"GUIDES\":\n          filtered = filtered.filter((post) => post.category === \"Guides\");\n          break;\n          \n        default:\n          break;\n      }\n    }\n\n    if (searchQuery) {\n      filtered = filtered.filter(\n        (post) =>\n          post.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          post.category.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          post.content.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n\n  // Check if the clear button was clicked\n  if (!filter && !searchQuery) {\n    filtered = [...posts]; // Show all posts\n  }\n\n    setFilteredPosts(filtered);\n  }, [filter, searchQuery, posts]);\n\n  return (\n    <div className=\"\">\n      <Banner />\n      <Filters\n        filter={filter}\n        setFilter={setFilter}\n        setSearchQuery={setSearchQuery}\n      />\n      <PostsCards posts={filteredPosts} />\n    </div>\n  );\n};\n\nexport default Posts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}