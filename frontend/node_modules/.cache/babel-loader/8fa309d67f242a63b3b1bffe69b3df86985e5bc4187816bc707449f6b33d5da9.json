{"ast":null,"code":"import axios from \"axios\";\nexport const getPosts = async (filterBy, sortBy) => {\n  try {\n    // Construct query parameters based on filter and sort options\n    let queryParams = '';\n    if (filterBy) {\n      queryParams += `?filterBy=${filterBy}`;\n    }\n    if (sortBy) {\n      queryParams += `${queryParams ? '&' : '?'}sortBy=${sortBy}`;\n    }\n\n    // Fetch posts with optional query parameters\n    const response = await axios.get(`http://localhost:5050/api/posts${queryParams}`);\n    return response.data;\n  } catch (error) {\n    console.log(\"Error getting post data from server\");\n    throw error;\n  }\n};\n\n// export const getFilteredPosts = async (filter) => {\n//   try {\n//     let url = \"http://localhost:5050/api/posts\";\n\n//     // Apply filtering and sorting based on the selected filter\n//     switch (filter) {\n//       case \"newest\":\n//         url += \"?sortBy=newest\";\n//         break;\n//       case \"oldest\":\n//         url += \"?sortBy=oldest\";\n//         break;\n//       case \"A-Z\":\n//         url += \"?sortBy=title\";\n//         break;\n//       case \"NEWS\":\n//         url += \"?filterBy=news\";\n//         break;\n//       case \"Guides\":\n//         url += \"?filterBy=guides\";\n//         break;\n//       default:\n//         break;\n//     }\n\n//     const response = await axios.get(url);\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error getting filtered posts:\", error);\n//     throw error;\n//   }\n// };","map":{"version":3,"names":["axios","getPosts","filterBy","sortBy","queryParams","response","get","data","error","console","log"],"sources":["/home/dryphter-dev/Projects/Web/MERN/product-showcase/frontend/src/services/postService.js"],"sourcesContent":["import axios from \"axios\";\n\nexport const getPosts = async (filterBy, sortBy) => {\n  try {\n    // Construct query parameters based on filter and sort options\n    let queryParams = '';\n    if (filterBy) {\n      queryParams += `?filterBy=${filterBy}`;\n    }\n    if (sortBy) {\n      queryParams += `${queryParams ? '&' : '?'}sortBy=${sortBy}`;\n    }\n\n    // Fetch posts with optional query parameters\n    const response = await axios.get(`http://localhost:5050/api/posts${queryParams}`);\n    return response.data;\n  } catch (error) {\n    console.log(\"Error getting post data from server\");\n    throw error;\n  }\n};\n\n// export const getFilteredPosts = async (filter) => {\n//   try {\n//     let url = \"http://localhost:5050/api/posts\";\n\n//     // Apply filtering and sorting based on the selected filter\n//     switch (filter) {\n//       case \"newest\":\n//         url += \"?sortBy=newest\";\n//         break;\n//       case \"oldest\":\n//         url += \"?sortBy=oldest\";\n//         break;\n//       case \"A-Z\":\n//         url += \"?sortBy=title\";\n//         break;\n//       case \"NEWS\":\n//         url += \"?filterBy=news\";\n//         break;\n//       case \"Guides\":\n//         url += \"?filterBy=guides\";\n//         break;\n//       default:\n//         break;\n//     }\n\n//     const response = await axios.get(url);\n//     return response.data;\n//   } catch (error) {\n//     console.error(\"Error getting filtered posts:\", error);\n//     throw error;\n//   }\n// };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,MAAM,KAAK;EAClD,IAAI;IACF;IACA,IAAIC,WAAW,GAAG,EAAE;IACpB,IAAIF,QAAQ,EAAE;MACZE,WAAW,IAAK,aAAYF,QAAS,EAAC;IACxC;IACA,IAAIC,MAAM,EAAE;MACVC,WAAW,IAAK,GAAEA,WAAW,GAAG,GAAG,GAAG,GAAI,UAASD,MAAO,EAAC;IAC7D;;IAEA;IACA,MAAME,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAE,kCAAiCF,WAAY,EAAC,CAAC;IACjF,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClD,MAAMF,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}